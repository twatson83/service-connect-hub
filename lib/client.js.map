{"version":3,"sources":["../src/client.js"],"names":["connect","addHandler","removeHandler","setContext","send","publish","socket","handlers","url","on","message","type","callbacks","forEach","cb","console","info","key","emit","callback","push","filter","length","context","endpoint","headers"],"mappings":";;;;;;QAUgBA,O,GAAAA,O;QAyBAC,U,GAAAA,U;QAaAC,a,GAAAA,a;QAgBAC,U,GAAAA,U;QAWAC,I,GAAAA,I;QAUAC,O,GAAAA,O;;AArFhB;;;;;;AAEA,IAAIC,eAAJ;;AAEO,IAAIC,8BAAW,EAAf;;AAEP;;;;AAIO,SAASP,OAAT,CAAiBQ,GAAjB,EAAsB;AACzBF,aAAS,iBAAGN,OAAH,CAAWQ,GAAX,CAAT;;AAEA;AACA;AACAF,WAAOG,EAAP,CAAU,iBAAV,EAA6B,UAACC,OAAD,EAAUC,IAAV,EAAmB;AAC5C,YAAIC,YAAYL,SAASI,IAAT,CAAhB;AACA,YAAIC,SAAJ,EAAc;AACVA,sBAAUC,OAAV,CAAkB;AAAA,uBAAMC,GAAGJ,OAAH,EAAYC,IAAZ,CAAN;AAAA,aAAlB;AACH;AACJ,KALD;;AAOAL,WAAOG,EAAP,CAAU,WAAV,EAAuB,YAAM;AACzBM,gBAAQC,IAAR,CAAa,qCAAb;AACA,aAAI,IAAIC,GAAR,IAAeV,QAAf,EAAwB;AACpBD,mBAAOY,IAAP,CAAY,aAAZ,EAA2BD,GAA3B;AACH;AACJ,KALD;AAMH;;AAED;;;;;AAKO,SAAShB,UAAT,CAAoBU,IAApB,EAA0BQ,QAA1B,EAAoC;AACvCZ,aAASI,IAAT,IAAiBJ,SAASI,IAAT,KAAkB,EAAnC;AACAJ,aAASI,IAAT,EAAeS,IAAf,CAAoBD,QAApB;;AAEA;AACAb,WAAOY,IAAP,CAAY,aAAZ,EAA2BP,IAA3B;AACH;;AAED;;;;;AAKO,SAAST,aAAT,CAAuBS,IAAvB,EAA6BQ,QAA7B,EAAuC;AAC1C;AACAZ,aAASI,IAAT,IAAiBJ,SAASI,IAAT,EAAeU,MAAf,CAAsB,cAAM;AACzC,eAAOP,OAAOK,QAAd;AACH,KAFgB,CAAjB;;AAIA;AACA,QAAIZ,SAASI,IAAT,EAAeW,MAAf,KAA0B,CAA9B,EAAgC;AAC5BhB,eAAOY,IAAP,CAAY,gBAAZ,EAA8BP,IAA9B;AACH;AACJ;;AAED;;;;AAIO,SAASR,UAAT,CAAoBoB,OAApB,EAA6B;AAChCjB,WAAOY,IAAP,CAAY,aAAZ,EAA2BK,OAA3B;AACH;;AAED;;;;;;;AAOO,SAASnB,IAAT,CAAcoB,QAAd,EAAwBb,IAAxB,EAA8BD,OAA9B,EAAoD;AAAA,QAAbe,OAAa,yDAAH,EAAG;;AACvDnB,WAAOY,IAAP,CAAY,cAAZ,EAA4BM,QAA5B,EAAsCb,IAAtC,EAA4CD,OAA5C,EAAqDe,OAArD;AACH;;AAED;;;;;;AAMO,SAASpB,OAAT,CAAiBM,IAAjB,EAAuBD,OAAvB,EAA6C;AAAA,QAAbe,OAAa,yDAAH,EAAG;;AAChDnB,WAAOY,IAAP,CAAY,eAAZ,EAA6BP,IAA7B,EAAmCD,OAAnC,EAA4Ce,OAA5C;AACH","file":"client.js","sourcesContent":["import io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nexport let handlers = {};\r\n\r\n/**\r\n * Connects to server\r\n * @param  {string} url\r\n */\r\nexport function connect(url) {\r\n    socket = io.connect(url);\r\n\r\n    // Received from the server when a message has been consumed.  Executed all the callbacks that are interested in\r\n    // message type.\r\n    socket.on(\"handler-message\", (message, type) => {\r\n        var callbacks = handlers[type];\r\n        if (callbacks){\r\n            callbacks.forEach(cb => cb(message, type));\r\n        }\r\n    });\r\n\r\n    socket.on(\"reconnect\", () => {\r\n        console.info(\"Re-registering handlers with server\");\r\n        for(var key in handlers){\r\n            socket.emit('add-handler', key);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Begins listening for messages of type @type.  Will execute @callback when a message is received of type @type.\r\n * @param  {string} type\r\n * @param  {function} callback\r\n */\r\nexport function addHandler(type, callback) {\r\n    handlers[type] = handlers[type] || [];\r\n    handlers[type].push(callback);\r\n\r\n    // Tells the server we are interested in the type.\r\n    socket.emit('add-handler', type);\r\n}\r\n\r\n/**\r\n * Unbinds the type and callback and stops listening for the message type if no more callbacks are bound to the type.\r\n * @param  {string} type\r\n * @param  {function} callback\r\n */\r\nexport function removeHandler(type, callback) {\r\n    // Remove callback from the map\r\n    handlers[type] = handlers[type].filter(cb => {\r\n        return cb !== callback;\r\n    });\r\n\r\n    // Unbinds handler from client on server\r\n    if (handlers[type].length === 0){\r\n        socket.emit('remove-handler', type);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the context on the server.  Server can use the context to filter messages.\r\n * @param  {object} context\r\n */\r\nexport function setContext(context) {\r\n    socket.emit('set-context', context);\r\n}\r\n\r\n/**\r\n * Sends a command to the specified endpoint(s).\r\n * @param {String|Array} endpoint\r\n * @param  {String} type\r\n * @param  {Object} message\r\n * @param  {Object|undefined} headers\r\n */\r\nexport function send(endpoint, type, message, headers = {}){\r\n    socket.emit('send-command', endpoint, type, message, headers);\r\n}\r\n\r\n/**\r\n * Published an event of the specified type.\r\n * @param  {String} type\r\n * @param  {Object} message\r\n * @param  {Object|undefined} headers\r\n */\r\nexport function publish(type, message, headers = {}){\r\n    socket.emit('publish-event', type, message, headers);\r\n}"]}